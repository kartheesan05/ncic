To display a **UI message saying ‚ÄúCorrect!‚Äù** when the **correct object is placed in a socket**, follow these steps using Unity's **XR Interaction Toolkit** and **UI Text** system:

---

## ‚úÖ Step-by-Step Guide

### üß± 1. Add a UI Text Element

1. In the **Hierarchy**:

   * Right-click ‚Üí `UI > Text - TextMeshPro` (install TMP if prompted)
   * Rename it to `CorrectMessage`
2. In the **Inspector**:

   * Change the text to `Correct!`
   * Set **Font Size** to something visible (e.g., 36)
   * Change **Color** to green
   * Position it appropriately on the screen (e.g., top center)
   * **Uncheck** the `GameObject` (disable it) so it‚Äôs hidden initially

---

### üõ†Ô∏è 2. Tag or Layer Your "Correct" Object (Optional)

Make sure the correct object (e.g., sphere) is identifiable. You can:

* Assign it a **Tag** (e.g., `CorrectObject`)
  or
* Use a custom **Interaction Layer** (as explained earlier)

---

### üß† 3. Create a Script to Show the Message When Correct Object Is Inserted

Create a script and attach it to your **Socket Interactor** object:

```csharp
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class ShowCorrectMessage : MonoBehaviour
{
    public XRSocketInteractor socketInteractor;
    public GameObject correctMessageUI;
    public string correctTag = "CorrectObject"; // Tag of the correct object

    void OnEnable()
    {
        socketInteractor.selectEntered.AddListener(OnObjectPlaced);
    }

    void OnDisable()
    {
        socketInteractor.selectEntered.RemoveListener(OnObjectPlaced);
    }

    void OnObjectPlaced(SelectEnterEventArgs args)
    {
        if (args.interactableObject.transform.CompareTag(correctTag))
        {
            correctMessageUI.SetActive(true);
        }
    }
}
```

---

### ‚öôÔ∏è 4. Hook It Up in Inspector

1. Select the object with the `ShowCorrectMessage` script.
2. Drag in:

   * The **Socket Interactor** component into `socketInteractor`
   * The **"Correct!" UI GameObject** into `correctMessageUI`
3. Set the tag of the correct object to `CorrectObject`

---

### üß™ Optional Add-On: Auto-Hide Message After Delay

Add this inside the `OnObjectPlaced()` method if you want the message to disappear:

```csharp
StartCoroutine(HideMessageAfterSeconds(2f));
```

Then add this coroutine:

```csharp
IEnumerator HideMessageAfterSeconds(float seconds)
{
    yield return new WaitForSeconds(seconds);
    correctMessageUI.SetActive(false);
}
```

---

Let me know if you‚Äôd like it to play a sound or animate when the message shows!

